{"version":3,"sources":["lib/sessionStorage.js","actions/api/Env.js","actions/api/Api.js","actions/api/Session.js","actions/login.js","screens/signin/SignIn.js","screens/signin/SignInContainer.js","screens/notFound/index.js","screens/notFound/NotFound.js","screens/App.js","screens/home/Home.js","screens/AppContainer.js","serviceWorker.js","store/store.js","reducers/sessions.js","reducers/index.js","index.js"],"names":["sessionStorage","SessionStorage","Object","classCallCheck","this","user","authenticationToken","AUTHENTICATED_USER","AUTH_TOKEN","SESSION_STORAGE_ERR","key","window","getItem","Error","value","setItem","clear","getter","authenticationUser","trim","length","JSON","parse","token","setter","stringify","config","baseURL","getAuthToken","logRejection","url","request","response","text","arguments","undefined","console","warn","concat","body","status","statusText","Api","rawResponse","defaultData","json","then","setToken","get","go","method","post","put","patch","delete","headers","Headers","Accept","login","password","btoa","set","fetchUrl","env","Promise","resolve","reject","fetch","ok","String","charAt","data","log","handleFailedRequest","error","logFailure","ENVIRONMENT","authorizationHandler","authToken","getResponseData","Session","URL","email","params","catch","PASSWORD_RECOVERY_URL","SIGNUP_URL","instance","userLoginFailure","result","type","errorMessage","errors","authenticateUser","dispatch","sendAuthRequest","session","emailLogin","success","isLoggedIn","userLoginSuccess","err","SignIn","props","_this","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","_this2","_this$props","_this$state2","react_default","a","createElement","react_router","to","className","Row","Col","sm","size","push","pull","offset","Form","style","color","FormGroup","Label","for","Input","placeholder","onChange","e","setState","target","Button","onClick","Component","SignInContainer","connect","currentUser","NotFound","react_router_dom","MENU_ITEMS","title","route","component","exact","mainMenu","App","ComponentToRender","pathname","from","location","paddingTop","path","map","screen","render","checkAuth","Container","renderRoutes","AppContainer","ownProps","Boolean","hostname","match","middleware","initialState","getUser","reducers","action","assign","applyMiddleware","thunk","store","createStore","combineReducers","objectSpread","routerReducer","ReactDOM","es","screens_AppContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7061214b.chunk.js","sourcesContent":["class SessionStorage {\n  constructor() {\n    this.user = null;\n    this.authenticationToken = null;\n    this.AUTHENTICATED_USER = 'AUTHENTICATED_USER';\n    this.AUTH_TOKEN = 'AUTH_TOKEN';\n    this.SESSION_STORAGE_ERR = 'Current browser does not support window.sessionStorage!';\n  }\n\n  getter(key) {\n    if (typeof window.sessionStorage !== 'undefined') {\n      return window.sessionStorage.getItem(key);\n    }\n    throw new Error(this.SESSION_STORAGE_ERR);\n  }\n\n  setter(key, value) {\n    if (typeof window.sessionStorage !== 'undefined') {\n      window.sessionStorage.setItem(key, value);\n      return value;\n    }\n    throw new Error(this.SESSION_STORAGE_ERR);\n  }\n\n  wipeSession() {\n    if (typeof window.sessionStorage !== 'undefined') {\n      window.sessionStorage.clear();\n      return true;\n    }\n    throw new Error(this.SESSION_STORAGE_ERR);\n  }\n\n  getUser() {\n    const user = this.getter(this.AUTHENTICATED_USER);\n    this.authenticationUser = user && user.trim().length > 0 ? JSON.parse(user) : null;\n\n    return this.authenticationUser;\n  }\n\n  getAuthToken() {\n    const token = this.getter(this.AUTH_TOKEN);\n    this.authenticationToken = token && token.trim().length > 0 ? token : null;\n\n    return this.authenticationToken;\n  }\n\n  setToken(token) {\n    return this.setter(this.AUTH_TOKEN, token);\n  }\n\n  setUser(user) {\n    return this.setter(this.AUTHENTICATED_USER, JSON.stringify(user));\n  }\n}\n\nexport default new SessionStorage();\n","const config = {\n  demo: {\n    baseURL: 'http://cold-snack.mnya5sphky.us-west-2.elasticbeanstalk.com/',\n  },\n  development: {\n    baseURL: 'http://localhost:4200/api',\n  },\n  production: {\n    baseURL: '',\n  },\n  staging: {\n    baseURL: '',\n  },\n};\n\nconst env = 'development';\nexport default config[env];\n","/* eslint-disable no-console */\nimport fetch from 'isomorphic-fetch';\nimport sessionStorage from '../../lib/sessionStorage';\nimport ENVIRONMENT from './Env';\n\nlet AUTH_TOKEN = sessionStorage.getAuthToken();\n\nconst logRejection = (url, request, response, text = '') => {\n  console.warn(` ------ API request rejected\n        URL: ${url}\n        Body: ${request.body}\n        Response: ${response.status} ${response.statusText}\n        ${text || response}`);\n};\n\nconst logFailure = (url, request, error) => {\n  console.warn(` ------ API request failed\n        URL: ${url}\n        Body: ${request.body}\n        Error: ${error}`);\n};\n\nconst handleFailedRequest = (fetchUrl, request, response, reject) => {\n  response.json().then(\n    (data) => {\n      console.log(data);\n      logRejection(fetchUrl, request, response, data);\n      reject(data);\n    },\n    () => {\n      logRejection(fetchUrl, request, response);\n      reject(new Error(response));\n    },\n  );\n};\n\nclass Api {\n    static get = url => (\n      Api.go(url, {\n        method: 'get',\n      })\n    );\n\n    static post = (url, body) => (\n      Api.go(url, {\n        method: 'post',\n        body,\n      })\n    );\n\n    static put = (url, body) => (\n      Api.go(url, {\n        method: 'put',\n        body,\n      })\n    );\n\n    static patch = (url, body) => (\n      Api.go(url, {\n        method: 'patch',\n        body,\n      })\n    );\n\n    static delete = url => (\n      Api.go(url, {\n        method: 'delete',\n      })\n    );\n\n    static go = (url, request = {}) => {\n      const headers = new Headers({ Accept: 'application/json' });\n\n      if (request.body !== undefined) {\n        if (request.body.login && request.body.password) {\n          AUTH_TOKEN = `Basic ${btoa(`${request.body.login}:${request.body.password}`)}`;\n          request.body.login = null;\n          request.body.password = null;\n        }\n        headers.set('Content-Type', 'application/json');\n        request.body = JSON.stringify(request.body);\n      }\n      if (AUTH_TOKEN) headers.set('Authorization', AUTH_TOKEN);\n      request.headers = headers;\n      const fetchUrl = `${Api.env.baseURL}${url}`;\n\n      return new Promise((resolve, reject) => {\n        fetch(fetchUrl, request).then((response) => {\n          const success = response.ok && String(response.status).charAt() === '2';\n          // eslint-disable-next-line no-unused-expressions\n          success ? resolve(response) : handleFailedRequest(fetchUrl, request, response, reject);\n        },\n        (error) => {\n          logFailure(fetchUrl, request, error);\n          reject(new Error(error));\n        });\n      });\n    };\n\n    static getResponseData(rawResponse, defaultData = null) {\n      return rawResponse.json().then(response => (response || defaultData));\n    }\n\n    static get authToken() {\n      AUTH_TOKEN = sessionStorage.getAuthToken();\n      return AUTH_TOKEN;\n    }\n\n    static set authToken(value) {\n      AUTH_TOKEN = sessionStorage.setToken(value);\n    }\n\n    static env = {\n      ...ENVIRONMENT,\n    }\n}\n\nexport default Api;\n","/* eslint-disable class-methods-use-this */\nimport Api from './Api';\n\nconst authorizationHandler = (response) => {\n  const authToken = response.headers.get('Authorization');\n  console.log(response, 'AUTH')\n  if (authToken) {\n    Api.authToken = authToken;\n  }\n  return Api.getResponseData(response);\n};\n\nclass Session {\n    static URL = '/users/login';\n\n    static SIGNUP_URL = '/sessions/email';\n\n    static PASSWORD_RECOVERY_URL = '/sessions/email/password-recovery';\n\n    delete() {\n      Api.authToken = null;\n      return Api.delete(this.URL);\n    }\n\n    emailLogin(email, password) {\n      const params = { email, password };\n      return Api.post(Session.URL, params)\n        .then(authorizationHandler)\n        .catch(error => error);\n    }\n\n    logout() {\n      Api.authToken = null;\n    }\n\n    resetPassword(email) {\n      const params = { email };\n      return Api.post(this.PASSWORD_RECOVERY_URL, params);\n    }\n}\n\nconst instance = new Session();\n\nexport default instance;\n","import { session } from './api';\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const userLogin = () => ({\n  type: USER_LOGIN,\n  sendAuthRequest: true,\n});\n\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const userLoginSuccess = result => ({\n  type: USER_LOGIN_SUCCESS,\n  isLoggedIn: true,\n  user: result.user,\n});\n\nexport const USER_LOGIN_FAILURE = 'USER_LOGIN_FAILURE';\nexport const userLoginFailure = result => ({\n  type: USER_LOGIN_FAILURE,\n  errorMessage: JSON.stringify(result.errors),\n});\n\nexport const authenticateUser = (email, password) => (dispatch) => {\n  dispatch(userLogin());\n  return session.emailLogin(email, password).then((result) => {\n    console.log(result)\n    if (result.success) {\n      return dispatch(userLoginSuccess(result));\n    }\n    return dispatch(userLoginFailure(result));\n  }).catch(err => dispatch(userLoginFailure(err)));\n};\n","/* eslint-disable react/require-default-props */\n/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport {\n  Button, Col, Form, FormGroup, Input, Label, Row,\n} from 'reactstrap';\n\nclass SignIn extends Component {\n    static propTypes = {\n      isLoggedIn: PropTypes.bool.isRequired,\n      errorMessage: PropTypes.object,\n      authenticateUser: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        email: '',\n        password: '',\n      };\n    }\n\n    authenticateUser = () => {\n      const { authenticateUser } = this.props;\n      const { email, password } = this.state;\n      return authenticateUser(email, password);\n    };\n\n    render() {\n      const { isLoggedIn, errorMessage } = this.props;\n      const { email, password } = this.state;\n\n      if (isLoggedIn) {\n        return <Redirect to=\"/home\" />;\n      }\n\n      return (\n        <div className=\"form-signin-wrapper\">\n          <Row>\n            <Col sm={{\n              size: 6, push: 2, pull: 2, offset: 1,\n            }}\n            >\n              <Form>\n\n                {errorMessage\n                  ? (\n                    <div style={{ color: 'red' }}>\n                      {errorMessage}\n                      {' '}\n                    </div>\n                  )\n                  : null\n                            }\n                <FormGroup>\n                  <Label for=\"Email\">Email</Label>\n                  <Input\n                    value={email}\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                    onChange={e => this.setState({ email: e.target.value })}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"Password\">Password</Label>\n                  <Input\n                    value={password}\n                    type=\"password\"\n                    placeholder=\"Enter Password\"\n                    onChange={e => this.setState({ password: e.target.value })}\n                  />\n                </FormGroup>\n              </Form>\n              <Button color=\"primary\" onClick={this.authenticateUser}>\n                            Signin\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n}\n\nexport default SignIn;\n","import { connect } from 'react-redux';\nimport { authenticateUser } from '../../actions/login';\nimport SignIn from './SignIn';\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.session.isLoggedIn,\n  currentUser: state.session.currentUser,\n  errorMessage: state.session.errorMessage,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  authenticateUser: (email, password) => dispatch(authenticateUser(email, password)),\n});\n\nconst SignInContainer = connect(mapStateToProps, mapDispatchToProps)(SignIn);\n\nexport default SignInContainer;\n","import NotFound from './NotFound';\n\nexport default NotFound;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => (\n  <div className=\"page-content-wrapper\">\n    <h2>\n        You seem to be lost. Go\n      {' '}\n      <Link to=\"/home\">Home</Link>\n    </h2>\n  </div>\n);\n\nexport default NotFound;\n","/* eslint-disable react/require-default-props */\n/* eslint-disable react/forbid-prop-types */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  BrowserRouter as Router, Route, Redirect, Switch,\n} from 'react-router-dom';\nimport { Container } from 'reactstrap';\nimport { SignInContainer } from './signin';\nimport Home from './home';\nimport NotFound from './notFound';\n\nconst MENU_ITEMS = [\n  {\n    title: 'Home', route: '/home', component: Home, exact: true, mainMenu: true,\n  },\n];\n\nclass App extends Component {\n  static propTypes = {\n    isLoggedIn: PropTypes.bool.isRequired,\n    currentUser: PropTypes.object,\n  };\n\n  checkAuth(ComponentToRender) {\n    const { isLoggedIn } = this.props;\n\n    return props => (isLoggedIn ? <ComponentToRender {...props} />\n      : (\n        <Redirect to={{\n          pathname: '/login',\n          state: { from: props.location },\n        }}\n        />\n      ));\n  }\n\n  renderRoutes() {\n    return (\n      <div style={{ paddingTop: 20 }}>\n        <Switch>\n          <Route style={{ paddingTop: 20 }} path=\"/login\" component={SignInContainer} />\n          {\n          MENU_ITEMS.map(screen => (\n            <Route\n              path={screen.route}\n              key={screen.route}\n              exact={screen.exact}\n              render={this.checkAuth(screen.component)}\n            />\n          ))\n          }\n          <Route exact path=\"*\" component={NotFound} />\n        </Switch>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Router>\n        <Container>\n          {this.renderRoutes()}\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nconst Home = () => (\n  <div className=\"page-content-wrapper\">\n    <h2>\n        This is Home screen\n    </h2>\n  </div>\n);\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { authenticateUser } from '../actions/login';\nimport App from './App';\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.session.isLoggedIn,\n  currentUser: state.session.currentUser,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  authenticateUser: () => dispatch(authenticateUser(ownProps)),\n});\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n\nexport default AppContainer;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { routerReducer } from 'react-router-redux';\nimport * as reducers from '../reducers/index';\n\nlet middleware;\n\nif (process.env.NODE_ENV !== 'production') {\n  middleware = applyMiddleware(thunk, logger);\n} else {\n  middleware = applyMiddleware(thunk);\n}\n\nconst store = createStore(combineReducers({ ...reducers.default, routerReducer }), middleware);\n\nexport default store;\n","import sessionStorage from '../lib/sessionStorage';\n\nconst initialState = {\n  sendAuthRequest: false,\n  isLoggedIn: !!sessionStorage.getAuthToken(),\n  currentUser: sessionStorage.getUser(),\n  errorMessage: null,\n};\n\nconst session = (state = initialState, action) => {\n  switch (action.type) {\n    case 'USER_LOGIN_SUCCESS':\n      return Object.assign({}, state, {\n        isLoggedIn: true,\n        currentUser: action.user,\n        errorMessage: null,\n      });\n\n    case 'USER_LOGIN':\n      return Object.assign({}, state, {\n        sendAuthRequest: true,\n      });\n\n    case 'USER_LOGIN_FAILURE':\n      return Object.assign({}, state, {\n        isLoggedIn: false,\n        errorMessage: action.errorMessage,\n        currentUser: null,\n      });\n\n    case 'USER_LOGOUT':\n      return Object.assign({}, state, {\n        sendAuthRequest: true,\n      });\n\n    case 'USER_LOGOUT_SUCCESS':\n      return Object.assign({}, state, {\n        isLoggedIn: false,\n        currentUser: null,\n        errorMessage: null,\n      });\n\n    case 'USER_LOGOUT_FAILURE':\n      return Object.assign({}, state, {\n        errorMessage: action.errorMessage,\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default session;\n","import session from './sessions';\n\nexport default {\n  session,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport AppContainer from './screens/AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}